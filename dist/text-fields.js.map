{"mappings":"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","sources":["src/TextFields.js"],"sourcesContent":["class TextFields {\n  #notches;\n\n  constructor() {\n    this.#notches = [];\n  }\n\n  async init() {\n    await this.#notched();\n    await this.#handleEvents();\n\n    this.#initialNotchWidths();\n  }\n\n  #notched() {\n    document.querySelectorAll('.floating-label').forEach(label => {\n      const notchedOutline = label.closest('.notched-outline');\n      const outline = notchedOutline ?? document.createElement('div');\n\n      if (!notchedOutline) {\n        outline.classList.add('notched-outline');\n        outline.innerHTML = `\n          <div class=\"notched-outline__leading\"></div>\n          <div class=\"notched-outline__notch\">${label.outerHTML}</div>\n          <div class=\"notched-outline__trailing\"></div>\n        `;\n        label.replaceWith(outline);\n      }\n\n      this.#notches.push({\n        container: outline.parentNode,\n        notch: outline.querySelector('.notched-outline__notch'),\n      });\n\n      this.#setNotchWidth(this.#notches[this.#notches.length - 1].notch, this.#getNotchWidth(this.#notches[this.#notches.length - 1].notch));\n    });\n  }\n\n  #handleEvents() {\n    document.querySelectorAll('.text-field-container input, .text-field-container textarea').forEach(field => {\n      const notchData = this.#notches.find(data => data.container.contains(field));\n\n      if (!notchData) return;\n\n      this.#setupObserver(field, notchData.container);\n      this.#addListeners(field, notchData.container, notchData.notch, field instanceof HTMLTextAreaElement);\n    });\n  }\n\n  #initialNotchWidths() {\n    this.#notches.forEach(notchData => {\n      this.#setNotchWidth(notchData.notch, this.#getNotchWidth(notchData.notch));\n    });\n  }\n\n  #setupObserver(field, container) {\n    const fieldType = field instanceof HTMLTextAreaElement;\n    const fieldObserver = new MutationObserver(() => {\n      this.#updateStyles(field, container, fieldType);\n    });\n\n    fieldObserver.observe(field, { attributes: true, attributeFilter: ['required', 'disabled'] });\n  }\n\n  #addListeners(field, container, notch, fieldType) {\n    const eventType = fieldType ? 'input' : 'change';\n\n    field.addEventListener('focus', () => {\n      container.classList.add(fieldType ? 'textarea--focused' : 'input--focused');\n\n      this.#setNotchWidth(notch, this.#getNotchWidth(notch));\n    });\n\n    field.addEventListener('blur', () => {\n      container.classList.remove(fieldType ? 'textarea--focused' : 'input--focused');\n\n      if (field.value.trim()) {\n        this.#setNotchWidth(notch, this.#getNotchWidth(notch));\n      } else {\n        this.#setNotchWidth(notch, 'auto');\n      }\n    });\n\n    field.addEventListener(eventType, () => {\n      this.#updateStyles(field, container, fieldType);\n      this.#textareaResizeable(field, container, fieldType);\n    });\n\n    this.#updateStyles(field, container, fieldType);\n  }\n\n  #updateStyles(field, container, fieldType) {\n    container.classList.toggle(fieldType ? 'textarea--filled' : 'input--filled', field.value.trim().length > 0);\n    container.classList.toggle(fieldType ? 'textarea--disabled' : 'input--disabled', field.disabled);\n    container.classList.toggle(fieldType ? 'textarea--error' : 'input--error', field.required);\n  }\n\n  #setNotchWidth(notch, width) {\n    notch.style.width = width;\n  }\n\n  #getNotchWidth(notch) {\n    const label = notch.querySelector('.floating-label');\n\n    return label ? `${(parseFloat(getComputedStyle(label).width) + 13) * 0.75}px` : 'auto';\n  }\n\n  #textareaResizeable(field, container, fieldType) {\n    if (fieldType && container.classList.contains('textarea--auto-resizeable')) {\n      field.style.height = 'auto';\n      field.style.height = `${field.scrollHeight}px`;\n    }\n  }\n}\n\nexport default TextFields;\n"],"names":[],"version":3,"file":"text-fields.js.map"}