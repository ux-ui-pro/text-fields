{"mappings":"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","sources":["src/index.js","src/events/handlers.js","src/events/observer.js","src/behavior/required.js","src/behavior/disabled.js","src/events/listeners.js","src/utils/getNotchWidth.js","src/utils/textareaResizeable.js","src/behavior/filled.js","src/utils/notched.js","src/utils/reset.js"],"sourcesContent":["import handlers from './events/handlers';\nimport notched from './utils/notched';\nimport reset from './utils/reset';\n\nconst TextFields = {\n  notches: [],\n\n  notched,\n\n  handlers,\n\n  reset,\n\n  async init() {\n    await this.notched();\n    await this.handlers();\n  },\n};\n\nexport default TextFields;\n","import observer from './observer';\nimport listeners from './listeners';\n\nfunction handlers() {\n  const fields = [...document.querySelectorAll('.text-field-container input, .text-field-container textarea')];\n\n  fields.forEach((field) => {\n    const notchData = this.notches.find((data) => data.container.contains(field));\n\n    if (!notchData) return;\n\n    const { container, notch } = notchData;\n    const fieldType = field instanceof HTMLTextAreaElement;\n\n    observer(field, container, notch);\n    listeners(field, container, notch, fieldType);\n  });\n}\n\nexport default handlers;\n","import required from '../behavior/required';\nimport disabled from '../behavior/disabled';\n\nfunction observer(field, container) {\n  const fieldType = field instanceof HTMLTextAreaElement;\n\n  const fieldObserver = new MutationObserver(() => {\n    required(field, container, fieldType);\n    disabled(field, container, fieldType);\n  });\n\n  fieldObserver.observe(field, { attributes: true, attributeFilter: ['required', 'disabled'] });\n}\n\nexport default observer;\n","function required(field, container, fieldType) {\n  if (field.required) {\n    container.classList.add(fieldType ? 'textarea--error' : 'input--error');\n  } else {\n    container.classList.remove(fieldType ? 'textarea--error' : 'input--error');\n  }\n}\n\nexport default required;\n","function disabled(field, container, fieldType) {\n  if (field.disabled) {\n    container.classList.add(fieldType ? 'textarea--disabled' : 'input--disabled');\n  } else {\n    container.classList.remove(fieldType ? 'textarea--disabled' : 'input--disabled');\n  }\n}\n\nexport default disabled;\n","import getNotchWidth from '../utils/getNotchWidth';\nimport textareaResizeable from '../utils/textareaResizeable';\nimport filled from '../behavior/filled';\nimport disabled from '../behavior/disabled';\nimport required from '../behavior/required';\n\nfunction listeners(field, container, notch, fieldType) {\n  const eventType = fieldType ? 'input' : 'change';\n  const notchStyle = notch.style;\n\n  field.addEventListener('focus', () => {\n    container.classList.add(fieldType ? 'textarea--focused' : 'input--focused');\n    notchStyle.width = getNotchWidth(notch);\n  });\n\n  field.addEventListener('blur', () => {\n    container.classList.remove(fieldType ? 'textarea--focused' : 'input--focused');\n\n    if (field.value.trim().length <= 0) {\n      notchStyle.width = 'auto';\n    }\n  });\n\n  field.addEventListener(eventType, () => {\n    filled(field, container, fieldType);\n    textareaResizeable(field, container, fieldType);\n  });\n\n  filled(field, container, fieldType);\n  disabled(field, container, fieldType);\n  required(field, container, fieldType);\n\n  notchStyle.width = getNotchWidth(notch);\n}\n\nexport default listeners;\n","function getNotchWidth(notch) {\n  const label = notch.querySelector('.floating-label');\n  return label ? `${(parseFloat(getComputedStyle(label).width) + 13) * 0.75}px` : 'auto';\n}\n\nexport default getNotchWidth;\n","function textareaResizeable(field, container, fieldType) {\n  if (fieldType && container.classList.contains('textarea--auto-resizeable')) {\n    const currentField = field;\n\n    currentField.style.height = 'auto';\n    currentField.style.height = `${currentField.scrollHeight}px`;\n  }\n}\n\nexport default textareaResizeable;\n","function filled(field, container, fieldType) {\n  if (field.value.trim().length > 0) {\n    container.classList.add(fieldType ? 'textarea--filled' : 'input--filled');\n  } else {\n    container.classList.remove(fieldType ? 'textarea--filled' : 'input--filled');\n  }\n}\n\nexport default filled;\n","function notched() {\n  const labels = document.querySelectorAll('.floating-label');\n\n  labels.forEach((label) => {\n    const notchedOutline = label.closest('.notched-outline');\n\n    if (notchedOutline) {\n      this.notches.push({\n        container: notchedOutline.parentNode,\n        notch: notchedOutline.querySelector('.notched-outline__notch'),\n      });\n    } else {\n      const outline = document.createElement('div');\n\n      outline.classList.add('notched-outline');\n      outline.innerHTML = `<div class=\"notched-outline__leading\"></div><div class=\"notched-outline__notch\">${label.outerHTML}</div><div class=\"notched-outline__trailing\"></div>`;\n\n      label.replaceWith(outline);\n\n      this.notches.push({\n        container: outline.parentNode,\n        notch: outline.querySelector('.notched-outline__notch'),\n      });\n    }\n  });\n}\n\nexport default notched;\n","function reset() {\n  const fields = [...document.querySelectorAll('.text-field-container input, .text-field-container textarea')];\n\n  const resetFields = () => {\n    fields.forEach((field) => {\n      const e = field;\n\n      e.parentNode.classList.remove('textarea--filled', 'textarea--error');\n      e.parentNode.classList.remove('input--filled', 'input--error');\n      e.value = '';\n\n      if (e.parentNode.classList.contains('textarea--auto-resizeable')) {\n        e.style.height = 'auto';\n      }\n    });\n  };\n\n  requestAnimationFrame(resetFields);\n}\n\nexport default reset;\n"],"names":[],"version":3,"file":"index.js.map"}