{"mappings":"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","sources":["src/TextFields.js","src/events/handlers.js","src/events/observer.js","src/behavior/required.js","src/behavior/disabled.js","src/events/listeners.js","src/utils/getNotchWidth.js","src/utils/textareaResizeable.js","src/behavior/filled.js","src/utils/notched.js","src/utils/reset.js"],"sourcesContent":["import handlers from './events/handlers';\nimport notched from './utils/notched';\nimport reset from './utils/reset';\n\nconst TextFields = {\n  notches: [],\n  notched,\n  handlers,\n  reset,\n  async init() {\n    await this.notched();\n    await this.handlers();\n  },\n};\n\nexport default TextFields;\n","import observer from './observer';\nimport listeners from './listeners';\n\nfunction handlers() {\n  [...document.querySelectorAll('.text-field-container input, .text-field-container textarea')].forEach((field) => {\n    const notchData = this.notches.find((data) => data.container.contains(field));\n\n    if (!notchData) return;\n\n    observer(field, notchData.container, notchData.notch);\n    listeners(field, notchData.container, notchData.notch, field instanceof HTMLTextAreaElement);\n  });\n}\n\nexport default handlers;\n","import required from '../behavior/required';\nimport disabled from '../behavior/disabled';\n\nconst observer = (field, container) => {\n  const fieldType = field instanceof HTMLTextAreaElement;\n\n  const fieldObserver = new MutationObserver(() => {\n    required(field, container, fieldType);\n    disabled(field, container, fieldType);\n  });\n\n  fieldObserver.observe(field, { attributes: true, attributeFilter: ['required', 'disabled'] });\n};\n\nexport default observer;\n","const required = (field, container, fieldType) => {\n  if (field.required) {\n    container.classList.add(fieldType ? 'textarea--error' : 'input--error');\n  } else {\n    container.classList.remove(fieldType ? 'textarea--error' : 'input--error');\n  }\n};\n\nexport default required;\n","const disabled = (field, container, fieldType) => {\n  if (field.disabled) {\n    container.classList.add(fieldType ? 'textarea--disabled' : 'input--disabled');\n  } else {\n    container.classList.remove(fieldType ? 'textarea--disabled' : 'input--disabled');\n  }\n};\n\nexport default disabled;\n","import getNotchWidth from '../utils/getNotchWidth';\nimport textareaResizeable from '../utils/textareaResizeable';\nimport filled from '../behavior/filled';\nimport disabled from '../behavior/disabled';\nimport required from '../behavior/required';\n\nconst setNotchWidth = (notch, width) => {\n  notch.style.width = width;\n};\n\nconst listeners = (field, container, notch, fieldType) => {\n  const eventType = fieldType ? 'input' : 'change';\n\n  field.addEventListener('focus', () => {\n    container.classList.add(fieldType ? 'textarea--focused' : 'input--focused');\n\n    setNotchWidth(notch, getNotchWidth(notch));\n  });\n\n  field.addEventListener('blur', () => {\n    container.classList.remove(fieldType ? 'textarea--focused' : 'input--focused');\n    if (!field.value.trim()) {\n      setNotchWidth(notch, 'auto');\n    }\n  });\n\n  field.addEventListener(eventType, () => {\n    filled(field, container, fieldType);\n    textareaResizeable(field, container, fieldType);\n  });\n\n  filled(field, container, fieldType);\n  disabled(field, container, fieldType);\n  required(field, container, fieldType);\n\n  setNotchWidth(notch, getNotchWidth(notch));\n};\n\nexport default listeners;\n","const getNotchWidth = (notch) => {\n  const label = notch.querySelector('.floating-label');\n  return label ? `${(parseFloat(getComputedStyle(label).width) + 13) * 0.75}px` : 'auto';\n};\n\nexport default getNotchWidth;\n","const textareaResizeable = (field, container, fieldType) => {\n  if (fieldType && container.classList.contains('textarea--auto-resizeable')) {\n    field.style.height = 'auto';\n    field.style.height = `${field.scrollHeight}px`;\n  }\n};\n\nexport default textareaResizeable;\n","const filled = (field, container, fieldType) => {\n  if (field.value.trim().length > 0) {\n    container.classList.add(fieldType ? 'textarea--filled' : 'input--filled');\n  } else {\n    container.classList.remove(fieldType ? 'textarea--filled' : 'input--filled');\n  }\n};\n\nexport default filled;\n","const notched = function notchedFunction() {\n  document.querySelectorAll('.floating-label').forEach((label) => {\n    const notchedOutline = label.closest('.notched-outline');\n\n    const outline = notchedOutline || document.createElement('div');\n    if (!notchedOutline) {\n      outline.classList.add('notched-outline');\n      outline.innerHTML = `<div class=\"notched-outline__leading\"></div><div class=\"notched-outline__notch\">${label.outerHTML}</div><div class=\"notched-outline__trailing\"></div>`;\n      label.replaceWith(outline);\n    }\n\n    this.notches.push({\n      container: outline.parentNode,\n      notch: outline.querySelector('.notched-outline__notch'),\n    });\n  });\n};\n\nexport default notched;\n","const reset = () => {\n  const fields = [...document.querySelectorAll('.text-field-container input, .text-field-container textarea')];\n\n  const resetFields = () => fields.forEach((field) => {\n    field.parentNode.classList.remove('textarea--filled', 'textarea--error', 'input--filled', 'input--error');\n    field.value = '';\n\n    if (field.parentNode.classList.contains('textarea--auto-resizeable')) {\n      field.style.height = 'auto';\n    }\n  });\n\n  requestAnimationFrame(resetFields);\n};\n\nexport default reset;\n"],"names":[],"version":3,"file":"index.js.map"}