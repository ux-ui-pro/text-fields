{"mappings":"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","sources":["src/index.js"],"sourcesContent":["const TextFields = {\r\n    notches: [],\r\n    labels: null,\r\n    inputs: null,\r\n\r\n    wrap() {\r\n        this.labels = document.querySelectorAll('.floating-label');\r\n        this.labels.forEach((label) => {\r\n            const notchedOutline = label.closest('.notched-outline');\r\n\r\n            if (notchedOutline) {\r\n                this.notches.push({\r\n                    container: notchedOutline.parentNode,\r\n                    notch: notchedOutline.querySelector('.notched-outline__notch'),\r\n                });\r\n            } else {\r\n                const outline = document.createElement('div');\r\n\r\n                outline.classList.add('notched-outline');\r\n                outline.innerHTML = `<div class=\"notched-outline__leading\"></div><div class=\"notched-outline__notch\">${label.outerHTML}</div><div class=\"notched-outline__trailing\"></div>`;\r\n                label.replaceWith(outline);\r\n\r\n                this.notches.push({\r\n                    container: outline.parentNode,\r\n                    notch: outline.querySelector('.notched-outline__notch'),\r\n                });\r\n            }\r\n        });\r\n\r\n        this.update();\r\n    },\r\n\r\n    handleFields() {\r\n        const fields = [...document.querySelectorAll('.text-field-container input, .text-field-container textarea')];\r\n\r\n        fields.forEach((field) => {\r\n            const notchData = this.notches.find((data) => data.container.contains(field));\r\n\r\n            if (!notchData) return;\r\n\r\n            const { container, notch } = notchData;\r\n            const label = notch.querySelector('.floating-label');\r\n            const fieldType = field instanceof HTMLTextAreaElement;\r\n\r\n            if (field.disabled) {\r\n                container.classList.add(fieldType ? 'textarea--disabled' : 'input--disabled');\r\n            }\r\n\r\n            if (field.required) {\r\n                label.classList.add('floating-label--required');\r\n            }\r\n\r\n            this.toggleFilledClass(field, container, fieldType);\r\n            this.addEventListeners(field, container, notch, fieldType);\r\n        });\r\n\r\n        this.notches.forEach(({ notch }) => {\r\n            const notchElement = notch;\r\n\r\n            notchElement.style.width = this.getNotchWidth(notchElement);\r\n        });\r\n    },\r\n\r\n    addEventListeners(field, container, notch, fieldType) {\r\n        const eventType = fieldType ? 'input' : 'change';\r\n        const notchWidth = this.getNotchWidth(notch);\r\n        const notchStyle = notch.style;\r\n\r\n        field.addEventListener('focus', () => {\r\n            container.classList.add(fieldType ? 'textarea--focused' : 'input--focused');\r\n            notchStyle.width = notchWidth;\r\n        });\r\n\r\n        field.addEventListener('blur', () => {\r\n            container.classList.remove(fieldType ? 'textarea--focused' : 'input--focused');\r\n\r\n            if (field.value.trim().length <= 0) {\r\n                notchStyle.width = 'auto';\r\n            }\r\n        });\r\n\r\n        field.addEventListener(eventType, () => {\r\n            this.toggleFilledClass(field, container, fieldType);\r\n        });\r\n\r\n        if (fieldType && container.classList.contains('textarea--auto-resizeable')) {\r\n            field.addEventListener(eventType, () => {\r\n                const currentField = field;\r\n\r\n                currentField.style.height = 'auto';\r\n                currentField.style.height = `${currentField.scrollHeight}px`;\r\n            });\r\n        }\r\n    },\r\n\r\n    toggleFilledClass(field, container, fieldType) {\r\n        if (field.value.trim().length > 0) {\r\n            container.classList.add(fieldType ? 'textarea--filled' : 'input--filled');\r\n        } else {\r\n            container.classList.remove(fieldType ? 'textarea--filled' : 'input--filled');\r\n        }\r\n    },\r\n\r\n    getNotchWidth(notch) {\r\n        const label = notch.querySelector('.floating-label');\r\n        return label ? `${(parseFloat(getComputedStyle(label).width) + 13) * 0.75}px` : 'auto';\r\n    },\r\n\r\n    update() {\r\n        this.inputs = document.querySelectorAll('.text-field-container input, .text-field-container textarea');\r\n    },\r\n\r\n    init() {\r\n        this.wrap();\r\n        this.handleFields();\r\n    },\r\n\r\n    destroy() {\r\n        this.notches.forEach(({ container, notch }) => {\r\n            const label = notch.querySelector('.floating-label');\r\n            label.replaceWith(label.innerHTML);\r\n            container.replaceWith(notch.innerHTML);\r\n        });\r\n\r\n        this.notches = [];\r\n        this.labels = null;\r\n        this.inputs = null;\r\n    },\r\n};\r\n\r\nexport default TextFields;\r\n"],"names":[],"version":3,"file":"index.js.map"}