{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["class TextFields {\n  private textFieldContainer: (HTMLInputElement | HTMLTextAreaElement)[];\n\n  private floatingLabel: HTMLElement[];\n\n  private resizeObserver: ResizeObserver;\n\n  private notches: { container: HTMLElement; notch: HTMLElement }[] = [];\n\n  constructor() {\n    this.textFieldContainer = Array.from(document.querySelectorAll<HTMLInputElement | HTMLTextAreaElement>('.text-field-container input, .text-field-container textarea'));\n    this.floatingLabel = Array.from(document.querySelectorAll<HTMLElement>('.floating-label'));\n\n    this.resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        const notch = entry.target.closest('.notched-outline')?.querySelector<HTMLElement>('.notched-outline__notch');\n\n        if (notch) TextFields.setNotchWidth(notch, TextFields.getNotchWidth(notch));\n      });\n    });\n  }\n\n  private notched() {\n    this.floatingLabel.forEach((label) => {\n      const notchedOutline = label.closest('.notched-outline') ?? TextFields.createNotchedOutline(label);\n\n      this.notches.push({ container: notchedOutline.parentNode as HTMLElement, notch: notchedOutline.querySelector<HTMLElement>('.notched-outline__notch')! });\n\n      const lastNotch = this.notches.at(-1)!.notch;\n\n      TextFields.setNotchWidth(lastNotch, TextFields.getNotchWidth(lastNotch));\n      this.resizeObserver.observe(notchedOutline.querySelector<HTMLElement>('.floating-label')!);\n    });\n  }\n\n  private static createNotchedOutline(label: HTMLElement): HTMLElement {\n    const notchedOutline = document.createElement('div');\n\n    notchedOutline.classList.add('notched-outline');\n    notchedOutline.innerHTML = `\n      <div class=\"notched-outline__leading\"></div>\n      <div class=\"notched-outline__notch\">${label.outerHTML}</div>\n      <div class=\"notched-outline__trailing\"></div>\n    `;\n    label.replaceWith(notchedOutline);\n\n    return notchedOutline;\n  }\n\n  private static setNotchWidth(notch: HTMLElement, width: string) {\n    const notchElement = notch; // Используем временную переменную\n    notchElement.style.width = width;\n  }\n\n  private static getNotchWidth(notch: HTMLElement): string {\n    const label = notch.querySelector<HTMLElement>('.floating-label');\n    return label ? `${(parseFloat(getComputedStyle(label).width) + 13) * 0.75}px` : 'auto';\n  }\n\n  private handleEvents() {\n    this.textFieldContainer.forEach((field) => {\n      const notchData = this.notches.find((data) => data.container.contains(field));\n\n      if (!notchData) return;\n\n      this.setupObserver(field, notchData.container);\n      this.addListeners(field, notchData.container, notchData.notch, field instanceof HTMLTextAreaElement);\n    });\n  }\n\n  private initialNotchWidths() {\n    this.notches.forEach(({ notch }) => {\n      TextFields.setNotchWidth(notch, TextFields.getNotchWidth(notch));\n    });\n  }\n\n  /* eslint-disable class-methods-use-this */\n  private setupObserver(field: HTMLInputElement | HTMLTextAreaElement, container: HTMLElement) {\n    const fieldObserver = new MutationObserver(() => {\n      TextFields.updateStyles(field, container, field instanceof HTMLTextAreaElement);\n    });\n\n    fieldObserver.observe(field, { attributes: true, attributeFilter: ['required', 'disabled'] });\n  }\n\n  private addListeners(field: HTMLInputElement | HTMLTextAreaElement, container: HTMLElement, notch: HTMLElement, fieldType: boolean) {\n    const eventType = fieldType ? 'input' : 'change';\n\n    field.addEventListener('focus', () => {\n      container.classList.add(fieldType ? 'textarea--focused' : 'input--focused');\n\n      TextFields.setNotchWidth(notch, TextFields.getNotchWidth(notch));\n    });\n\n    field.addEventListener('blur', () => {\n      container.classList.remove(fieldType ? 'textarea--focused' : 'input--focused');\n\n      TextFields.setNotchWidth(notch, field.value.trim() ? TextFields.getNotchWidth(notch) : 'auto');\n    });\n\n    field.addEventListener(eventType, () => {\n      TextFields.updateStyles(field, container, fieldType);\n\n      if (fieldType) TextFields.resizeTextarea(field as HTMLTextAreaElement, container);\n    });\n\n    TextFields.updateStyles(field, container, fieldType);\n  }\n  /* eslint-enable class-methods-use-this */\n\n  private static updateStyles(field: HTMLInputElement | HTMLTextAreaElement, container: HTMLElement, fieldType: boolean) {\n    container.classList.toggle(fieldType ? 'textarea--filled' : 'input--filled', field.value.trim().length > 0);\n    container.classList.toggle(fieldType ? 'textarea--disabled' : 'input--disabled', field.disabled);\n    container.classList.toggle(fieldType ? 'textarea--error' : 'input--error', field.required);\n  }\n\n  private static resizeTextarea(field: HTMLTextAreaElement, container: HTMLElement) {\n    if (container.classList.contains('textarea--auto-resizeable')) {\n      const newField = field;\n      newField.style.height = 'auto';\n      newField.style.height = `${field.scrollHeight}px`;\n    }\n  }\n\n  public async init() {\n    this.notched();\n    this.handleEvents();\n    this.initialNotchWidths();\n  }\n}\n\nexport default TextFields;\n"],"names":[],"version":3,"file":"index.js.map"}