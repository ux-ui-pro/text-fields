{"mappings":"AAAA,MAAM;IACF,aAAc;QACV,IAAI,CAAC,UAAU,EAAE;QACjB,IAAI,CAAC,SAAS,SAAS,iBAAiB;QACxC,IAAI,CAAC;QACL,IAAI,CAAC;IACT;IAEA,OAAO;QACH,IAAI,CAAC,OAAO,QAAQ,CAAA;YAChB,MAAM,iBAAiB,MAAM,QAAQ;YAErC,IAAI,gBACA,IAAI,CAAC,QAAQ,KAAK;gBACd,WAAW,eAAe;gBAC1B,OAAO,eAAe,cAAc;YACxC;iBACG;gBACH,MAAM,iBAAiB,SAAS,cAAc;gBAE9C,eAAe,UAAU,IAAI;gBAC7B,eAAe,YAAY,CAAC,gFAAgF,EAAE,MAAM,UAAU,mDAAmD,CAAC;gBAClL,MAAM,YAAY;gBAElB,IAAI,CAAC,QAAQ,KAAK;oBACd,WAAW,eAAe;oBAC1B,OAAO,eAAe,cAAc;gBACxC;YACJ;QACJ;QAEA,IAAI,CAAC;IACT,EAAC;IAED,eAAe;QACX,MAAM,SAAS;eAAI,SAAS,iBAAiB;SAA+D;QAE5G,OAAO,QAAQ,CAAA;YACX,MAAM,YAAY,IAAI,CAAC,QAAQ,KAAK,CAAA,YAAa,UAAU,UAAU,SAAS;YAE9E,IAAI,CAAC,WAAW;YAEhB,MAAM,aAAE,UAAS,SAAE,MAAK,EAAE,GAAG;YAC7B,MAAM,QAAQ,MAAM,cAAc;YAClC,MAAM,YAAY,iBAAiB;YAEnC,IAAI,MAAM,UACN,UAAU,UAAU,IAAI,YAAY,uBAAuB;YAG/D,IAAI,MAAM,UACN,MAAM,UAAU,IAAI;YAGxB,IAAI,MAAM,MAAM,OAAO,SAAS,GAAG;gBAC/B,UAAU,UAAU,IAAI,YAAY,qBAAqB;gBACzD,MAAM,MAAM,QAAQ,IAAI,CAAC,cAAc;YAC3C;YAEA,MAAM,iBAAiB,SAAS;gBAC5B,UAAU,UAAU,IAAI,YAAY,sBAAsB;gBAC1D,MAAM,MAAM,QAAQ,IAAI,CAAC,cAAc;YAC3C;YAEA,MAAM,iBAAiB,QAAQ;gBAC3B,UAAU,UAAU,OAAO,YAAY,sBAAsB;gBAE7D,IAAI,MAAM,MAAM,OAAO,UAAU,GAC7B,MAAM,MAAM,QAAQ;YAE5B;YAEA,MAAM,iBAAiB,UAAU;gBAC7B,IAAI,CAAC,kBAAkB,OAAO,WAAW;YAC7C;YAEA,IAAI,aAAa,UAAU,UAAU,SAAS,8BAC1C,MAAM,iBAAiB,SAAS;gBAC5B,MAAM,MAAM,SAAS;gBACrB,MAAM,MAAM,SAAS,CAAC,EAAE,MAAM,aAAa,EAAE,CAAC;YAClD;iBAEA,MAAM,iBAAiB,SAAS;gBAC5B,IAAI,CAAC,kBAAkB,OAAO,WAAW;YAC7C;QAER;IACJ,EAAC;IAED,SAAS;QACL,IAAI,CAAC,SAAS,SAAS,iBAAiB;IAC5C,EAAC;IAED,oBAAoB,CAAC,OAAO,WAAW;QACnC,MAAM,MAAM,OAAO,SAAS,IACtB,UAAU,UAAU,IAAI,YAAY,qBAAqB,mBACzD,UAAU,UAAU,OAAO,YAAY,qBAAqB;IACtE,EAAC;IAED,gBAAgB,CAAC;QACb,MAAM,QAAQ,MAAM,cAAc;QAClC,OAAO,QAAQ,CAAC,EAAE,AAAC,CAAA,WAAW,iBAAiB,OAAO,SAAS,EAAC,IAAK,IAAI,EAAE,CAAC,GAAG;IACnF,EAAC;AACL;IAEA,2CAAe","sources":["src/index.js"],"sourcesContent":["class TextFields {\r\n    constructor() {\r\n        this.notches = []\r\n        this.labels = document.querySelectorAll('.floating-label')\r\n        this.wrap()\r\n        this.handleFields()\r\n    }\r\n\r\n    wrap = () => {\r\n        this.labels.forEach(label => {\r\n            const notchedOutline = label.closest('.notched-outline')\r\n\r\n            if (notchedOutline) {\r\n                this.notches.push({\r\n                    container: notchedOutline.parentNode,\r\n                    notch: notchedOutline.querySelector('.notched-outline__notch')\r\n                })\r\n            } else {\r\n                const notchedOutline = document.createElement('div')\r\n\r\n                notchedOutline.classList.add('notched-outline')\r\n                notchedOutline.innerHTML = `<div class=\"notched-outline__leading\"></div><div class=\"notched-outline__notch\">${label.outerHTML}</div><div class=\"notched-outline__trailing\"></div>`\r\n                label.replaceWith(notchedOutline)\r\n\r\n                this.notches.push({\r\n                    container: notchedOutline.parentNode,\r\n                    notch: notchedOutline.querySelector('.notched-outline__notch')\r\n                })\r\n            }\r\n        })\r\n\r\n        this.update()\r\n    }\r\n\r\n    handleFields = () => {\r\n        const fields = [...document.querySelectorAll('.text-field-container input, .text-field-container textarea')]\r\n\r\n        fields.forEach(field => {\r\n            const notchData = this.notches.find(notchData => notchData.container.contains(field))\r\n\r\n            if (!notchData) return\r\n\r\n            const { container, notch } = notchData\r\n            const label = notch.querySelector('.floating-label')\r\n            const fieldType = field instanceof HTMLTextAreaElement\r\n\r\n            if (field.disabled) {\r\n                container.classList.add(fieldType ? 'textarea--disabled' : 'input--disabled')\r\n            }\r\n\r\n            if (field.required) {\r\n                label.classList.add('floating-label--required')\r\n            }\r\n\r\n            if (field.value.trim().length > 0) {\r\n                container.classList.add(fieldType ? 'textarea--filled' : 'input--filled')\r\n                notch.style.width = this.getNotchWidth(notch)\r\n            }\r\n\r\n            field.addEventListener('focus', () => {\r\n                container.classList.add(fieldType ? 'textarea--focused' : 'input--focused')\r\n                notch.style.width = this.getNotchWidth(notch)\r\n            })\r\n\r\n            field.addEventListener('blur', () => {\r\n                container.classList.remove(fieldType ? 'textarea--focused' : 'input--focused')\r\n\r\n                if (field.value.trim().length <= 0) {\r\n                    notch.style.width = 'auto'\r\n                }\r\n            })\r\n\r\n            field.addEventListener('change', () => {\r\n                this.toggleFilledClass(field, container, fieldType)\r\n            })\r\n\r\n            if (fieldType && container.classList.contains('textarea--auto-resizeable')) {\r\n                field.addEventListener('input', () => {\r\n                    field.style.height = 'auto'\r\n                    field.style.height = `${field.scrollHeight}px`\r\n                })\r\n            } else {\r\n                field.addEventListener('input', () => {\r\n                    this.toggleFilledClass(field, container, fieldType)\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    update = () => {\r\n        this.inputs = document.querySelectorAll('.text-field-container input, .text-field-container textarea')\r\n    }\r\n\r\n    toggleFilledClass = (field, container, fieldType) => {\r\n        field.value.trim().length > 0\r\n            ? container.classList.add(fieldType ? 'textarea--filled' : 'input--filled')\r\n            : container.classList.remove(fieldType ? 'textarea--filled' : 'input--filled')\r\n    }\r\n\r\n    getNotchWidth = (notch) => {\r\n        const label = notch.querySelector('.floating-label')\r\n        return label ? `${(parseFloat(getComputedStyle(label).width) + 13) * .75}px` : 'auto'\r\n    }\r\n}\r\n\r\nexport default TextFields"],"names":[],"version":3,"file":"index.module.js.map"}