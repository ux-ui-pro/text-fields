{"mappings":"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","sources":["src/TextFields.js"],"sourcesContent":["class TextFields {\n  #textFieldContainer;\n\n  #floatingLabel;\n\n  #resizeObserver;\n\n  #notches = [];\n\n  constructor() {\n    this.#textFieldContainer = [...document.querySelectorAll('.text-field-container input, .text-field-container textarea')];\n    this.#floatingLabel = [...document.querySelectorAll('.floating-label')];\n\n    this.#resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        const notch = entry.target.closest('.notched-outline')?.querySelector('.notched-outline__notch');\n\n        if (notch) this.#setNotchWidth(notch, this.#getNotchWidth(notch));\n      });\n    });\n  }\n\n  #notched() {\n    this.#floatingLabel.forEach(label => {\n      const notchedOutline = label.closest('.notched-outline') ?? this.#createNotchedOutline(label);\n\n      this.#notches.push({ container: notchedOutline.parentNode, notch: notchedOutline.querySelector('.notched-outline__notch') });\n\n      const lastNotch = this.#notches.at(-1).notch;\n\n      this.#setNotchWidth(lastNotch, this.#getNotchWidth(lastNotch));\n      this.#resizeObserver.observe(notchedOutline.querySelector('.floating-label'));\n    });\n  }\n\n  #createNotchedOutline(label) {\n    const notchedOutline = document.createElement('div');\n\n    notchedOutline.classList.add('notched-outline');\n    notchedOutline.innerHTML = `\n      <div class=\"notched-outline__leading\"></div>\n      <div class=\"notched-outline__notch\">${label.outerHTML}</div>\n      <div class=\"notched-outline__trailing\"></div>\n    `;\n    label.replaceWith(notchedOutline);\n\n    return notchedOutline;\n  }\n\n  #setNotchWidth = (notch, width) => {\n    notch.style.width = width;\n  };\n\n  #getNotchWidth = (notch) => {\n    const label = notch.querySelector('.floating-label');\n\n    return label ? `${(parseFloat(getComputedStyle(label).width) + 13) * 0.75}px` : 'auto';\n  };\n\n  #handleEvents() {\n    this.#textFieldContainer.forEach(field => {\n      const notchData = this.#notches.find(data => data.container.contains(field));\n\n      if (!notchData) return;\n\n      this.#setupObserver(field, notchData.container);\n      this.#addListeners(field, notchData.container, notchData.notch, field instanceof HTMLTextAreaElement);\n    });\n  }\n\n  #initialNotchWidths() {\n    this.#notches.forEach(({ notch }) => {\n      this.#setNotchWidth(notch, this.#getNotchWidth(notch));\n    });\n  }\n\n  #setupObserver(field, container) {\n    const fieldObserver = new MutationObserver(() => {\n      this.#updateStyles(field, container, field instanceof HTMLTextAreaElement);\n    });\n\n    fieldObserver.observe(field, { attributes: true, attributeFilter: ['required', 'disabled'] });\n  }\n\n  #addListeners(field, container, notch, fieldType) {\n    const eventType = fieldType ? 'input' : 'change';\n\n    field.addEventListener('focus', () => {\n      container.classList.add(fieldType ? 'textarea--focused' : 'input--focused');\n\n      this.#setNotchWidth(notch, this.#getNotchWidth(notch));\n    });\n\n    field.addEventListener('blur', () => {\n      container.classList.remove(fieldType ? 'textarea--focused' : 'input--focused');\n\n      this.#setNotchWidth(notch, field.value.trim() ? this.#getNotchWidth(notch) : 'auto');\n    });\n\n    field.addEventListener(eventType, () => {\n      this.#updateStyles(field, container, fieldType);\n\n      if (fieldType) this.#resizeTextarea(field, container);\n    });\n\n    this.#updateStyles(field, container, fieldType);\n  }\n\n  #updateStyles(field, container, fieldType) {\n    container.classList.toggle(fieldType ? 'textarea--filled' : 'input--filled', field.value.trim().length > 0);\n    container.classList.toggle(fieldType ? 'textarea--disabled' : 'input--disabled', field.disabled);\n    container.classList.toggle(fieldType ? 'textarea--error' : 'input--error', field.required);\n  }\n\n  #resizeTextarea(field, container) {\n    if (container.classList.contains('textarea--auto-resizeable')) {\n      field.style.height = 'auto';\n      field.style.height = `${field.scrollHeight}px`;\n    }\n  }\n\n  async init() {\n    this.#notched();\n    this.#handleEvents();\n    this.#initialNotchWidths();\n  }\n}\n\nexport default TextFields;\n"],"names":[],"version":3,"file":"index.module.js.map"}